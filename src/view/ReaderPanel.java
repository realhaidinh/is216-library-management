package view;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;

import controller.ReaderDAO;
import model.Reader;
import util.ReaderToExcel;

public class ReaderPanel extends JFrame {
	private JPanel readerPanel;
	private JLabel title;
	private JTextField idField;
	private JLabel readerId;
	private JTextField nameField;
	private JLabel name;
	private JTable readerTable;
	private JScrollPane scroll;
	private JTextField birthdayField;
	private JTextField phoneField;
	private JLabel birthday;
	private JLabel phone;
	private JButton addBtn;
	private JButton deleteBtn;
	private JButton editBtn;
	private JButton exportBtn;
	private JButton searchBtn;
	private JTextField searchField;
	private JComboBox searchCombo;
	private ArrayList<Reader> readers;
	private DefaultTableModel model;
	String[] headers = {"Mã độc giả", "Tên độc giả", "Số điện thoại", "Ngày sinh"};
	private BookPanel bookPanel;
	private BorrowPanel borrowPanel;

	public ReaderPanel() {
		$$$setupUI$$$();
		model = (DefaultTableModel) readerTable.getModel();
		model.setColumnIdentifiers(headers);

		showTable(-1, "");
		readerTable.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				idField.setText(model.getValueAt(readerTable.getSelectedRow(), 0).toString());
				nameField.setText(model.getValueAt(readerTable.getSelectedRow(), 1).toString());
				birthdayField.setText(model.getValueAt(readerTable.getSelectedRow(), 2).toString());
				phoneField.setText(model.getValueAt(readerTable.getSelectedRow(), 3).toString());
			}
		});
		ReaderPanel thisPanel = this;
		addBtn.addActionListener(e -> {
			AddReader addForm = new AddReader(thisPanel);
			addForm.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
			addForm.pack();
			addForm.setVisible(true);
		});
		deleteBtn.addActionListener(e -> {
			int row = readerTable.getSelectedRow();
			if (row == -1) {
				JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn độc giả cần xóa");
			} else {
				int input = JOptionPane.showConfirmDialog(thisPanel, "Xác nhận xóa độc giả", "Xóa độc giả", JOptionPane.OK_CANCEL_OPTION);
				if (input == JOptionPane.OK_OPTION) {
					if (ReaderDAO.getDAO().deleteById(model.getValueAt(row, 0).toString())) {
						showTable(-1, "");
						borrowPanel.showTable(-1, "");
						bookPanel.showTable(-1, "");
						JOptionPane.showMessageDialog(rootPane, "Xóa độc giả thành công");
						clearTextField();
					} else {
						JOptionPane.showMessageDialog(rootPane, "Xóa độc giả thất bại");
					}
				}
			}
		});
		editBtn.addActionListener(e -> {
			int row = readerTable.getSelectedRow();
			if (row == -1) {
				JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn sách cần sửa thông tin");
			} else {
				EditReader editForm = new EditReader(thisPanel, row);
				editForm.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
				editForm.pack();
				editForm.setVisible(true);
				clearTextField();
			}
		});
		exportBtn.addActionListener(e -> {
			SaveExcelFile saveFile = new SaveExcelFile();
			int input = saveFile.showDialog(thisPanel, "Lưu");
			if (input == JFileChooser.APPROVE_OPTION) {
				File file = saveFile.getSelectedFile();
				ReaderToExcel excel = new ReaderToExcel();
				excel.setFilePath(file.getAbsolutePath().concat(".xlsx"));
				if (excel.export(readers, headers)) {
					JOptionPane.showMessageDialog(rootPane, "Xuất danh sách thành công");
				} else {
					JOptionPane.showMessageDialog(rootPane, "Xuất danh sách thất bại");
				}
			}
		});
		for (int i = 0; i < 3; ++i)
			searchCombo.addItem(headers[i]);
		searchBtn.addActionListener(e -> {
			showTable(searchCombo.getSelectedIndex(), searchField.getText());
		});
	}

	public void showTable(int type, String query) {
		if (query.isEmpty())
			readers = ReaderDAO.findAllReader();
		else {
			switch (type) {
				case -1: {
					readers = ReaderDAO.findAllReader();
					break;
				}
				case 0: {
					readers = new ArrayList<Reader>();
					Reader reader = ReaderDAO.getDAO().findReaderById(query);
					if (reader.getReaderId() != null)
						readers.add(reader);
					break;
				}
				case 1: {
					readers = ReaderDAO.findReaderByName(query);
					break;
				}
				case 2: {
					readers = ReaderDAO.findReaderByPhone(query);
					break;
				}
			}
		}

		model.setNumRows(0);
		for (Reader reader : readers) {
			addToTable(reader);
		}
	}

	public void clearTextField() {
		idField.setText("");
		nameField.setText("");
		birthdayField.setText("");
		phoneField.setText("");
	}

	public void addToTable(Reader reader) {
		model.addRow(new Object[]{
				reader.getReaderId(), reader.getName(), reader.getPhone(), reader.getBirthDate()
		});
	}

	public JTable getReaderTable() {
		return readerTable;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		readerPanel = new JPanel();
		readerPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 6, new Insets(0, 0, 0, 0), -1, -1));
		title = new JLabel();
		title.setText("Quản lý độc giả");
		readerPanel.add(title, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		readerId = new JLabel();
		readerId.setText("Mã độc giả");
		readerPanel.add(readerId, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		idField = new JTextField();
		idField.setEditable(true);
		idField.setText("");
		readerPanel.add(idField, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		name = new JLabel();
		name.setText("Tên độc giả");
		readerPanel.add(name, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		nameField = new JTextField();
		nameField.setEditable(true);
		readerPanel.add(nameField, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		scroll = new JScrollPane();
		readerPanel.add(scroll, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		readerTable = new JTable();
		scroll.setViewportView(readerTable);
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		readerPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		readerPanel.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(4, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
		readerPanel.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		addBtn = new JButton();
		addBtn.setText("Thêm");
		panel3.add(addBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		deleteBtn = new JButton();
		deleteBtn.setText("Xóa");
		panel3.add(deleteBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		editBtn = new JButton();
		editBtn.setText("Sửa");
		panel3.add(editBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		exportBtn = new JButton();
		exportBtn.setText("Xuất danh sách");
		panel3.add(exportBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel3.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		birthday = new JLabel();
		birthday.setText("Ngày sinh");
		readerPanel.add(birthday, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		birthdayField = new JTextField();
		birthdayField.setEditable(true);
		readerPanel.add(birthdayField, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		phoneField = new JTextField();
		phoneField.setEditable(true);
		readerPanel.add(phoneField, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		phone = new JLabel();
		phone.setText("Số điện thoại");
		readerPanel.add(phone, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		searchBtn = new JButton();
		searchBtn.setText("Tìm kiếm");
		readerPanel.add(searchBtn, new com.intellij.uiDesigner.core.GridConstraints(3, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		searchField = new JTextField();
		readerPanel.add(searchField, new com.intellij.uiDesigner.core.GridConstraints(3, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		searchCombo = new JComboBox();
		readerPanel.add(searchCombo, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return readerPanel;
	}

	public void setBookPanel(BookPanel bookPanel) {
		this.bookPanel = bookPanel;
	}

	public void setBorrowPanel(BorrowPanel borrowPanel) {
		this.borrowPanel = borrowPanel;
	}
}
